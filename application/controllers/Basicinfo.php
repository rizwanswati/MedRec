<?phpdefined('BASEPATH') OR exit('No direct script access allowed');class Basicinfo extends CI_Controller{    public function __construct()    {        parent::__construct();        $this->load->library('form_validation');        $this->load->model('patientinfo');    }    public function index()    {        $this->load->view('basic_info/basic_info');    }    public function patient_basic_info()    {        $this->form_validation->set_error_delimiters('<div class="text-danger">', '</div>');        $this->form_validation->set_rules('first_name','First Name','required');        $this->form_validation->set_rules('address','Address','required');        $this->form_validation->set_rules('phone','Phone','required|min_length[11]|max_length[14]|is_unique[patient.contact]');        $this->form_validation->set_rules('age','Age','required|max_length[2]');        $this->form_validation->set_rules('reg_date','Registration Date','required');        if ($this->form_validation->run())        {            $data  = patient_data_sanitization($this->input->post());            $check = $this->patientinfo->insert($data);            if ($check){                inserted_id('reg_no',$check);                redirect(base_url().'basicinfo/patient_history','location');            }        }else{            $this->index();        }    }    public function delete($reg_no)    {        $tables = soft_delete(1); // regno        foreach ($tables as $tname){            $this->patientinfo->delete($tname,'regno',$reg_no);        }        $tables = soft_delete(2); // reg_no        foreach ($tables as $tname){            $this->patientinfo->delete($tname,'reg_no',$reg_no);        }        $this->patientinfo->delete(history_table_name(),'reg_no_hq',$reg_no);        $this->patientinfo->delete(gen_phy_exam_t_name(),'reg_no_pe',$reg_no);        $this->patientinfo->delete(bio_chemical_table_name(),'reg_no_bcr',$reg_no);        $data = getIMGnames(foot_images_table(),'regno',$reg_no);        $this->patientinfo->delete(foot_images_table(),'regno',$reg_no);        $path = $_SERVER['DOCUMENT_ROOT'].'/doc/uploads/';        foreach ($data as $name)        {            unlink($path.$name->img_name);        }        $this->patientinfo->delete(patient_table_name(),'reg_no',$reg_no);        redirect(base_url().'admin/dashboard','location');    }    public function edit($reg_no)    {        $data['regno']   = $reg_no;        $data['info']    = $this->patientinfo->getSingleRow(patient_table_name(),$reg_no);        $this->load->view('basic_info/edit_basic_info',$data);    }    public function saveChanges()    {        $this->form_validation->set_error_delimiters('<div class="text-danger">', '</div>');        $this->form_validation->set_rules('first_name','First Name','required');        $this->form_validation->set_rules('address','Address','required');        $this->form_validation->set_rules('phone','Phone','required|min_length[11]|max_length[14]');        $this->form_validation->set_rules('age','Age','required|max_length[2]');        if ($this->form_validation->run())        {            $regno   = $this->input->post('regno');            $data  = update_patient_data_sanitization($this->input->post());            $this->patientinfo->update(patient_table_name(),$regno,$data);            redirect(base_url().'admin/dashboard','location');        }else{            $this->edit();        }    }    public function patient_history()    {        $this->load->view('basic_info/history_questions');    }    public function get_history_info()    {        $index = 0;        $blank = "nill";        $this->form_validation->set_error_delimiters('<div class="text-danger">', '</div>');        $this->form_validation->set_rules('regno','Registration Number','required');        if ($this->form_validation->run())        {            $this->form_validation->set_rules('regno','Patient Does not Exists','is_unique[patient.reg_no]');            if(!$this->form_validation->run()) { //return false if not unique , means users exists                $reg_no = $this->input->post('regno');                $data = $this->input->post();                unset($data['regno']);                foreach ($data as $row) {                    if (empty($row)) {                        $data = array(                            'reg_no_hq' => $reg_no,                            'question' => qestions($index),                            'answer' => $blank                        );                        $this->patientinfo->insert_history($data);                        $index = $index + 1;                    } else {                        $data = array(                            'reg_no_hq' => $reg_no,                            'question' => qestions($index),                            'answer' => $row                        );                        $this->patientinfo->insert_history($data);                        $index = $index + 1;                    }                }                redirect(base_url() . 'basicinfo/gen_phy_exam', 'location');            }else{                Globals::setAuthenticatedMemeberId(true);                $this->patient_history();            }        }else{            $this->patient_history();        }    }    public function history()    {        $data['info'] = $this->patientinfo->getHistory(history_table_name());        $this->load->view('info/history',$data);    }    public function deleteHistory($regno)    {        $this->patientinfo->delete(history_table_name(),'reg_no_hq',$regno);        redirect(base_url().'basicinfo/history','location');    }        public function showHistory($regno)    {        $data['info'] = $this->patientinfo->getSingleHistoryRecord(history_table_name(),'reg_no_hq',$regno);        $this->load->view('basic_info/edit_history',$data);    }    public function updateHistory()    {        $reg_no = $this->input->post('regno');        $this->patientinfo->delete(history_table_name(),'reg_no_hq',$reg_no);        $index = 0;        $blank = "nill";        $data = $this->input->post();        unset($data['regno']);            foreach ($data as $row){                if (empty($row))                {                    $data = array(                        'reg_no_hq' => $reg_no,                        'question'  => qestions($index),                        'answer'    => $blank                    );                    $this->patientinfo->insert_history($data);                    $index = $index+1;                }else {                    $data = array(                        'reg_no_hq' => $reg_no,                        'question'  => qestions($index),                        'answer'    => $row                    );                    $this->patientinfo->insert_history($data);                    $index = $index+1;                }            }            redirect(base_url().'basicinfo/history','location');    }    public function gen_phy_exam() //general physical examination    {        $this->load->view('basic_info/general_phy_exam');    }    public function get_gen_phy_exam_data() //get general physical examination data    {        $this->form_validation->set_error_delimiters('<div class="text-danger">', '</div>');        $this->form_validation->set_rules('regno','Registration Number','required');        $this->form_validation->set_rules('ex_date','Date','required');        if($this->form_validation->run()) {            $this->form_validation->set_rules('regno', 'Patient Does not Exists', 'is_unique[patient.reg_no]');            if (!$this->form_validation->run()) { //return false if not unique , means users exists                $data = phy_exam_data_prep($this->input->post());                $input_id = $this->patientinfo->insert_physical_exam_data($data);                inserted_id('phy_id', $input_id);                redirect(base_url() . 'basicinfo/peripheral_pulses', 'location');            }else{                Globals::setAuthenticatedMemeberId(true);                $this->gen_phy_exam();            }        }else        {            $this->gen_phy_exam();        }    }    public function genphyexam()    {        $this->load->library('pagination');        $config = configuration();        $config['base_url']  = base_url('basicinfo/genphyexam');        $config['per_page']  = 12;        $config['total_rows'] = $this->patientinfo->getTotalRow(gen_phy_exam_t_name());        $this->pagination->initialize($config);        $data['info'] = $this->patientinfo->get(gen_phy_exam_t_name(),$config['per_page'],$this->uri->segment(3));        $data['pagination'] = TRUE;        $this->load->view('info/genphyexam',$data);    }        public function updateGenPhy($phy_id)    {        $data['info'] = $this->patientinfo->getSingleRecord(gen_phy_exam_t_name(),'phy_id',$phy_id);        $this->load->view('basic_info/edit_genexam',$data);    }     public function SaveGenUpdate()     {         $regno     = $this->input->post('regno');         $phy_id    = $this->input->post('phy_id');         $data       = phy_exam_update_data_prep($this->input->post());         $input_id   = $this->patientinfo->generic_update(gen_phy_exam_t_name(),'phy_id',$phy_id,$data);         $this->showGenPhy($regno);     }        public function showGenPhy($regno)    {        $data['info'] = $this->patientinfo->getRecord(gen_phy_exam_t_name(),'reg_no_pe',$regno);        $data['pagination'] = FALSE;        $this->load->view('info/genphyexam',$data);    }    public function deleteGenPhy($phy_id)    {        $this->patientinfo->delete(gen_phy_exam_t_name(),'phy_id',$phy_id);        redirect(base_url('basicinfo/genphyexam'));    }    public function peripheral_pulses()    {        $this->load->view('basic_info/peripheral_pulses');    }    public function get_peripheral_pulses()    {        $this->form_validation->set_error_delimiters('<div class="text-danger">', '</div>');        $this->form_validation->set_rules('regno','Registration Number','required');        if($this->form_validation->run()) {            $this->form_validation->set_rules('regno', 'Patient Does not Exists', 'is_unique[patient.reg_no]');            if (!$this->form_validation->run()) { //return false if not unique , means users exists                $posted = $this->input->post();                $regno = $this->input->post('regno');                if (array_key_exists('pta_r', $posted)) {                    $pta_r = $this->input->post('pta_r');                    foreach ($pta_r as $value) {                        $data = peri_prep('right', $regno, $value);                        $this->patientinfo->insert_peripheral_pulses(post_t_artry_right(), $data);                    }                }                if (array_key_exists('pta_l', $posted)) {                    $pta_l = $this->input->post('pta_l');                    foreach ($pta_l as $value) {                        $data = peri_prep('left', $regno, $value);                        $this->patientinfo->insert_peripheral_pulses(post_t_artry_left(), $data);                    }                }                if (array_key_exists('dpa_r', $posted)) {                    $dpa_r = $this->input->post('dpa_r');                    foreach ($dpa_r as $value) {                        $data = peri_prep('right', $regno, $value);                        $this->patientinfo->insert_peripheral_pulses(d_paedis_artry_right(), $data);                    }                }                if (array_key_exists('dpa_l', $posted)) {                    $dpa_l = $this->input->post('dpa_l');                    foreach ($dpa_l as $value) {                        $data = peri_prep('left', $regno, $value);                        $this->patientinfo->insert_peripheral_pulses(d_paedis_artry_left(), $data);                    }                }                redirect(base_url() . 'basicinfo/abpi', 'location');            }else{                Globals::setAuthenticatedMemeberId(true);                $this->peripheral_pulses();            }        }else{            $this->peripheral_pulses();        }    }        public function dpaedisleft($regno)    {        $data['info']    = $this->patientinfo->getSelectedRecord(d_paedis_artry_left(),'left','regno',$regno);        $data['regno']   = $regno;        $data['Title']   = "Dorsalis Paedis Artery Left";        $data['form_c']  = "dpaedisUpdateleft";        $data['del_c']   = "deleteDpaedisleft";        $data['name']    = "dpa_l";        $data['col']     = "left";        $data['pagination'] = FALSE;        $this->load->view('basic_info/edit_dpaedisleft',$data);    }    public function dpaedisUpdateleft()    {        $posted = $this->input->post();        $regno = $this->input->post('regno');        if (array_key_exists('dpa_l', $posted)) {            $dpa_l = $this->input->post('dpa_l');            $this->patientinfo->delete(d_paedis_artry_left(), 'regno', $regno);            foreach ($dpa_l as $value) {                $data = peri_prep('left', $regno, $value);                $this->patientinfo->insert_peripheral_pulses(d_paedis_artry_left(), $data);            }            redirect(base_url('admin/dashboard'), 'location');        } else {            Globals::setAuthenticatedMemeberId(TRUE);            $this->dpaedisleft($regno);        }    }    public function deleteDpaedisleft($regno){        $this->patientinfo->delete(d_paedis_artry_left(),'regno',$regno);        redirect(base_url('admin/dashboard'),'location');    }    public function dpaedisright($regno)    {        $data['info']    = $this->patientinfo->getSelectedRecord(d_paedis_artry_right(),'right','regno',$regno);        $data['regno']   = $regno;        $data['Title']   = "Dorsalis Paedis Artery Right";        $data['form_c']  = "dpaedisUpdateright";        $data['del_c']   = "deleteDpaedisright";        $data['name']    = "dpa_r";        $data['col']     = "right";        $data['pagination'] = FALSE;        $this->load->view('basic_info/edit_dpaedisleft',$data);    }    public function dpaedisUpdateright()    {        $posted = $this->input->post();        $regno = $this->input->post('regno');        if (array_key_exists('dpa_r',$posted))        {            $dpa_l = $this->input->post('dpa_r');            $this->patientinfo->delete(d_paedis_artry_right(),'regno',$regno);            foreach($dpa_l as $value)            {                $data = peri_prep('right',$regno,$value);                $this->patientinfo->insert_peripheral_pulses(d_paedis_artry_right(),$data);            }            redirect(base_url('admin/dashboard'),'location');        }else{            Globals::setAuthenticatedMemeberId(TRUE);            $this->dpaedisright($regno);        }    }    public function deleteDpaedisright($regno){        $this->patientinfo->delete(d_paedis_artry_right(),'regno',$regno);        redirect(base_url('admin/dashboard'),'location');    }    public function posttibialleft($regno)    {        $data['info']    = $this->patientinfo->getSelectedRecord(post_t_artry_left(),'left','regno',$regno);        $data['regno']   = $regno;        $data['Title']   = "Posterior Tibial Artery Left";        $data['form_c']  = "postTUpdateleft";        $data['del_c']   = "deletePostT";        $data['name']    = "pta_l";        $data['col']     = "left";        $data['pagination'] = FALSE;        $this->load->view('basic_info/edit_dpaedisleft',$data);    }    public function postTUpdateleft()    {        $posted = $this->input->post();        $regno = $this->input->post('regno');        if (array_key_exists('pta_l', $posted)) {            $dpa_l = $this->input->post('pta_l');            $this->patientinfo->delete(post_t_artry_left(), 'regno', $regno);            foreach ($dpa_l as $value) {                $data = peri_prep('left', $regno, $value);                $this->patientinfo->insert_peripheral_pulses(post_t_artry_left(), $data);            }            redirect(base_url('admin/dashboard'), 'location');        } else {            Globals::setAuthenticatedMemeberId(TRUE);            $this->posttibialleft($regno);        }    }    public function deletePostT($regno)    {        $this->patientinfo->delete(post_t_artry_left(),'regno',$regno);        redirect(base_url('admin/dashboard'),'location');    }    public function posttibialright($regno)    {        $data['info']    = $this->patientinfo->getSelectedRecord(post_t_artry_right(),'right','regno',$regno);        $data['regno']   = $regno;        $data['Title']   = "Posterior Tibial Artery Right";        $data['form_c']  = "postTUpdateright";        $data['del_c']   = "deletePostTright";        $data['name']    = "pta_r";        $data['col']     = "right";        $data['pagination'] = FALSE;        $this->load->view('basic_info/edit_dpaedisleft',$data);    }    public function postTUpdateright()    {        $posted = $this->input->post();        $regno = $this->input->post('regno');        if (array_key_exists('pta_r', $posted)) {            $dpa_l = $this->input->post('pta_r');            $this->patientinfo->delete(post_t_artry_right(), 'regno', $regno);            foreach ($dpa_l as $value) {                $data = peri_prep('right', $regno, $value);                $this->patientinfo->insert_peripheral_pulses(post_t_artry_right(), $data);            }            redirect(base_url('admin/dashboard'), 'location');        } else {            Globals::setAuthenticatedMemeberId(TRUE);            $this->posttibialright($regno);        }    }    public function deletePostTright($regno)    {        $this->patientinfo->delete(post_t_artry_right(),'regno',$regno);        redirect(base_url('admin/dashboard'),'location');    }    public function abpi()    {        $this->load->view('basic_info/abpi');    }    public function abpi_form()    {        $this->form_validation->set_error_delimiters('<div class="text-danger">', '</div>');        $this->form_validation->set_rules('regno','Registration Number','required');        if($this->form_validation->run()) {            $this->form_validation->set_rules('regno', 'Patient Does not Exists', 'is_unique[patient.reg_no]');            if (!$this->form_validation->run()) { //return false if not unique , means users exists                $data = peri_prep_abpi($this->input->post());                $this->patientinfo->insert_peripheral_pulses(abpi_table_name(), $data);                redirect(base_url() . 'basicinfo/pressure_points', 'location');            }else{                Globals::setAuthenticatedMemeberId(true);                $this->abpi();            }        }else        {            $this->abpi();        }    }    public function showABPI()    {        $this->load->library('pagination');        $config = configuration();        $config['base_url']  = base_url('basicinfo/showABPI');        $config['per_page']  = 12;        $config['total_rows'] = $this->patientinfo->getTotalRow(abpi_table_name());        $this->pagination->initialize($config);        $data['info'] = $this->patientinfo->getABPI(abpi_table_name(),'reg_no','name','reg_no');        $data['pagination'] = TRUE;        $this->load->view('info/abpi',$data);    }    public function showABPI_Single($tableReg)    {        $this->load->library('pagination');        $config = configuration();        $config['base_url']  = base_url('basicinfo/showABPI');        $config['per_page']  = 12;        $config['total_rows'] = $this->patientinfo->getTotalRow(abpi_table_name());        $this->pagination->initialize($config);        $data['info'] = $this->patientinfo->generic_get(abpi_table_name(),'reg_no',$tableReg,'name');        $data['pagination'] = TRUE;        $this->load->view('info/abpi',$data);    }        public function deleteABPI($abpi_id)    {        $this->patientinfo->delete(abpi_table_name(),'abpi_id',$abpi_id);        redirect(base_url('basicinfo/showABPI'));    }    public function update_ABPI($abpi_id)    {        $data['info'] = $this->patientinfo->getSingleRecord(abpi_table_name(),'abpi_id',$abpi_id);        $data['pagination'] = FALSE;        $this->load->view('basic_info/edit_abpi',$data);    }        public function UpdateABPI()    {        $abpi_id = $this->input->post('abpi_id');        $this->form_validation->set_error_delimiters('<div class="text-danger">', '</div>');        $this->form_validation->set_rules('regno','Registration Number','required');        if($this->form_validation->run()){            $abpi_id = $this->input->post('abpi_id');            $data = peri_prep_abpi($this->input->post());            $this->patientinfo->generic_update(abpi_table_name(),'abpi_id',$abpi_id,$data);            redirect(base_url().'basicinfo/showABPI','location');        }else        {            $this->update_ABPI($abpi_id);        }    }    public function pressure_points()    {        $this->load->view('basic_info/pressure_points');    }    public function pressure_point_form()    {        $this->form_validation->set_error_delimiters('<div class="text-danger">', '</div>');        $this->form_validation->set_rules('regno', 'Registration Number', 'required');        $this->form_validation->set_rules('date','Date','required');        if ($this->form_validation->run()) {            $this->form_validation->set_rules('regno', 'Patient Does not Exists', 'is_unique[patient.reg_no]');            if (!$this->form_validation->run()) {                if (!empty($_FILES['foot_img']['name'][0])) {                    $imgs_name = array();                    $this->load->library('upload');                    $files = $_FILES;                    $total_images = count($_FILES['foot_img']['name']);                    for ($i = 0; $i < $total_images; $i++) {                        $_FILES['userfile']['name'] = $files['foot_img']['name'][$i];                        $_FILES['userfile']['type'] = $files['foot_img']['type'][$i];                        $_FILES['userfile']['tmp_name'] = $files['foot_img']['tmp_name'][$i];                        $_FILES['userfile']['error'] = $files['foot_img']['error'][$i];                        $_FILES['userfile']['size'] = $files['foot_img']['size'][$i];                        $this->upload->initialize(img_upload_config());                        $this->upload->do_upload();                        $info = $this->upload->data();                        $imgs_name[] = $info['file_name'];                    }                    $data = prep_pressure_sensation($this->input->post(), FALSE);                    $this->patientinfo->insert_pressure_sensation(pressure_sensation_table_name(), $data);                    $regno = $this->input->post('regno');                    for ($i = 0; $i < count($imgs_name); $i++) {                        $data = prep_img_data($imgs_name[$i], $regno, '', FALSE);                        $this->patientinfo->insert_pressure_sensation(foot_images_table(), $data);                    }                    redirect(base_url() . 'basicinfo/touch_pressure_readings', 'location');                } else { //image presence check                    $data = prep_pressure_sensation($this->input->post(), FALSE);                    $this->patientinfo->insert_pressure_sensation(pressure_sensation_table_name(), $data);                    redirect(base_url() . 'basicinfo/touch_pressure_readings', 'location');                }            }else{ //regno integrity check                Globals::setAuthenticatedMemeberId(true);                $this->pressure_points();            }        }        else { //validationj else            $this->pressure_points();        }    }    public function SavePressureUpdated()    {        $this->form_validation->set_error_delimiters('<div class="text-danger">', '</div>');        $this->form_validation->set_rules('regno', 'Registration Number', 'required');        $ps_id = $this->input->post('ps_id');        $regno = $this->input->post('regno');        $date  = $this->input->post('date');        if ($this->form_validation->run()) {            if (!empty($_FILES['foot_img']['name'][0])) {                $this->deletePressure_Update($ps_id,$regno,$date);                $imgs_name = array();                $this->load->library('upload');                $files = $_FILES;                $total_images = count($_FILES['foot_img']['name']);                for ($i = 0; $i < $total_images; $i++) {                    $_FILES['userfile']['name'] = $files['foot_img']['name'][$i];                    $_FILES['userfile']['type'] = $files['foot_img']['type'][$i];                    $_FILES['userfile']['tmp_name'] = $files['foot_img']['tmp_name'][$i];                    $_FILES['userfile']['error'] = $files['foot_img']['error'][$i];                    $_FILES['userfile']['size'] = $files['foot_img']['size'][$i];                    $this->upload->initialize(img_upload_config());                    $this->upload->do_upload();                    $info = $this->upload->data();                    $imgs_name[] = $info['file_name'];                }                $data = prep_pressure_sensation($this->input->post(),TRUE);                $this->patientinfo->insert_pressure_sensation(pressure_sensation_table_name(), $data);                for($i=0; $i<count($imgs_name); $i++)                {                    $data = prep_img_data($imgs_name[$i],$regno,$date,TRUE);                    $this->patientinfo->insert_pressure_sensation(foot_images_table(), $data);                }                redirect(base_url() . 'basicinfo/showPressure_All', 'location');            } else {                $data = prep_pressure_sensation($this->input->post(),TRUE); //if user leave img empty but changes the values only, then delete imgs from foot_imgs where date=$date and regno=$regno                $this->patientinfo->generic_update(pressure_sensation_table_name(),'ps_id',$ps_id,$data);                redirect(base_url() . 'basicinfo/showPressure_All', 'location');            }        }        else {            $this->pressure_points();        }    }    public function deletePressure_Update($ps_id,$regno,$date)    {        $this->patientinfo->delete(pressure_sensation_table_name(),'ps_id',$ps_id);        $data = getIDs(foot_images_table(),'date','regno',$date,$regno);        $path = $_SERVER['DOCUMENT_ROOT'].'/doc/uploads/';        $this->patientinfo->deleteImages($date,$regno);        foreach ($data as $name)        {            unlink($path.$name->img_name);        }        return TRUE;    }    public function showPressure_All()    {        $this->load->library('pagination');        $config = configuration();        $config['base_url']  = base_url('basicinfo/showPressure_All');        $config['per_page']  = 10;        $config['total_rows'] = $this->patientinfo->getTotalRow(pressure_sensation_table_name());        $this->pagination->initialize($config);        $data['info'] = $this->patientinfo->generic_getAll(pressure_sensation_table_name(),'regno','name','reg_no',$config['per_page'],$this->uri->segment(3));        $data['pagination'] = TRUE;        $this->load->view('info/pressure_readings',$data);    }        public function showPressure_Single($regno)    {        $data['info'] = $this->patientinfo->getPressure_Single_patient(pressure_sensation_table_name(),'regno','reg_no',$regno,'name');        $data['pagination'] = FALSE;        $this->load->view('info/pressure_readings',$data);    }    public function deletePressure($ps_id,$regno,$day,$month,$year)    {        $date = $day.'/'.$month.'/'.$year;        $this->patientinfo->delete(pressure_sensation_table_name(),'ps_id',$ps_id);        $data = getIDs(foot_images_table(),'date','regno',$date,$regno);        $path = $_SERVER['DOCUMENT_ROOT'].'/doc/uploads/';        $this->patientinfo->deleteImages($date,$regno);        foreach ($data as $name)        {            unlink($path.$name->img_name);        }        redirect(base_url('basicinfo/showPressure_All'));    }    public function update_Pressure($ps_id,$day,$month,$year,$regno)    {        $date = $day.'/'.$month.'/'.$year;        $data['imgs'] = getIDs(foot_images_table(),'date','regno',$date,$regno);        $data['info'] = $this->patientinfo->getSingleRecord(pressure_sensation_table_name(),'ps_id',$ps_id);        $data['ps_id']= $ps_id;        $data['pagination'] = FALSE;        $this->load->view('basic_info/edit_pressure',$data);    }    public function touch_pressure_readings()    {        $this->load->view('basic_info/touch_pressure_readings');    }    public function touch_pressure_form()    {        $this->form_validation->set_error_delimiters('<div class="text-danger">', '</div>');        $this->form_validation->set_rules('regno','Registration Number','required');        if($this->form_validation->run()) {            $this->form_validation->set_rules('regno', 'Patient Does not Exists', 'is_unique[patient.reg_no]');            if (!$this->form_validation->run()) { //return false if not unique , means users exists                $data = prep_touch_sen($this->input->post());                $this->patientinfo->insert_pressure_sensation(tps_table_name(), $data);                redirect(base_url() . 'chemicalexam', 'location');            }else{                Globals::setAuthenticatedMemeberId(true);                $this->touch_pressure_readings();            }        }else{            $this->touch_pressure_readings();        }    }        public function touch()    {        $this->load->library('pagination');        $config = configuration();        $config['base_url']  = base_url('basicinfo/touch');        $config['per_page']  = 10;        $config['total_rows'] = $this->patientinfo->getTotalRow(tps_table_name());        $this->pagination->initialize($config);        $data['info'] = $this->patientinfo->generic_getAll(tps_table_name(),'regno','name','reg_no',$config['per_page'],$this->uri->segment(3));        $data['pagination'] = TRUE;        $this->load->view('info/touch_sensation',$data);    }    public function updateSensation($tpr_id)    {        $data['info'] = $this->patientinfo->getSingleRecord(tps_table_name(),'tpr_id',$tpr_id);        $this->load->view('basic_info/edit_touch',$data);    }        public function updateTouch()    {        $this->form_validation->set_error_delimiters('<div class="text-danger">', '</div>');        $this->form_validation->set_rules('regno','Registration Number','required');        $tps_id = $this->input->post('tpr_id');        if($this->form_validation->run()) {            $data = prep_touch_sen($this->input->post());            $this->patientinfo->generic_update(tps_table_name(),'tpr_id',$tps_id,$data);            redirect(base_url().'basicinfo/touch','location');        }else{            $this->updateSensation($tps_id);        }    }    public function deleteSensation($tpr_id)    {        $this->patientinfo->delete(tps_table_name(),'tpr_id',$tpr_id);        redirect(base_url('basicinfo/touch'));    }    public function showTouch($regno)    {        $data['info'] = $this->patientinfo->getPressure_Single_patient(tps_table_name(),'regno','reg_no',$regno,'name');        $data['pagination'] = FALSE;        $this->load->view('info/touch_sensation',$data);    }       public function ShowFootImgs($regno)   {       $data['info'] = $this->patientinfo->getFootImgs_Single_patient(foot_images_table(),'regno','reg_no',$regno,'name');       $data['pagination'] = FALSE;       $this->load->view('info/foot',$data);   }    public function openFootImg($day,$month,$year,$regno)    {        $date = $day.'/'.$month.'/'.$year;        $data['info'] = $this->patientinfo->getRecord(foot_images_table(),'date',$date,'regno',$regno);        $data['pagination'] = FALSE;        $this->load->view('info/imgs',$data);    }    public function deleteImgs($day,$month,$year,$regno)    {        $date = $day.'/'.$month.'/'.$year;        //get the file name against $date and $regnos        $data = getIDs(foot_images_table(),'date','regno',$date,$regno);        $path = $_SERVER['DOCUMENT_ROOT'].'/doc/uploads/';        $this->patientinfo->deleteImages($date,$regno);        foreach ($data as $name)        {            unlink($path.$name->img_name);        }        redirect(base_url('basicinfo/ShowFootImgs/'.$regno));    }    public function deleteSingle_Img($img_id,$day,$month,$year,$regno)    {        $date = $day.'/'.$month.'/'.$year;        $name = ifExists(foot_images_table(),'id',$img_id);        $path = $_SERVER['DOCUMENT_ROOT'].'/doc/uploads/';        $this->patientinfo->delete(foot_images_table(),'id',$img_id);        unlink($path.$name->img_name);        redirect(base_url('basicinfo/openFootImg/'.$date.'/'.$regno));    }}